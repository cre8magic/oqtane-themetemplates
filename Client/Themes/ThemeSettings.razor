@namespace [Owner].Theme.[Theme]
@inherits ModuleBase
@implements Oqtane.Interfaces.ISettingsControl
@inject OqtaneSettings OqtaneSettings
@inject IStringLocalizer<ThemeSettings> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer
@attribute [OqtaneIgnore]

@code {
    /// <summary>PageId - will be set on Init</summary>
    private int _pageId = -1;

    /// <summary>Scope we're currently editing - either "site" or "page" - is set in a drop-down</summary>
    private string _scope = "page";

    /// <summary>Binders for the settings fields, allowing for easy data binding</summary>
    private readonly SettingsEditor _editor = new();

    /// <summary>Initializer / On-Load</summary>
    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.TryGetValue("id", out var idString))
            _pageId = int.Parse(idString);
        await LoadSettings();
    }

    /// <summary>
    /// Load the settings based on the current scope (site or page)
    /// </summary>
    private async Task LoadSettings()
        => await RazorUtils.RunAsyncAndLogErrors(async () =>
        {
            var siteSettings = await OqtaneSettings.LoadSite(PageState.Site.SiteId);
            var pageSettings = await OqtaneSettings.LoadPage(_pageId);

            var isPage = _scope == "page";
            _editor.Setup(
                main: isPage ? pageSettings : siteSettings,
                fallback: isPage ? siteSettings : null
            );

            await Task.Yield();
        }, this, logger);

    /// <summary>
    /// Handle scope change event to update UI to site or page settings
    /// </summary>
    private async Task ScopeChanged(ChangeEventArgs eventArgs)
        => await RazorUtils.RunAsyncAndLogErrors(async () =>
        {
            _scope = (string)eventArgs.Value!;
            await LoadSettings();
            StateHasChanged();
        }, this, logger);

    /// <summary>
    /// Handle the save action for the settings. Will be called by the Oqtane framework.
    /// </summary>
    public async Task UpdateSettings()
        => await RazorUtils.RunAsyncAndLogErrors(() => _editor.Save(KeyPrefix), this, logger);
}

<div class="container">
    @* Choose Scope Site / Page - affects remaining fields *@
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="scope" ResourceKey="Scope" ResourceType="@ThemeSettingsType" HelpText="Specify if the settings are applicable to this page or the entire site.">Setting Scope:</Label>
        <div class="col-sm-9">
            <select id="scope" class="form-select" value="@_scope" @onchange="ScopeChanged">
                @if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin))
                {
                    <option value="site">@Localizer["Site"]</option>
                }
                <option value="page">@Localizer["Page"]</option>
            </select>
        </div>
    </div>

    @* Enable Login *@
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="login" ResourceKey="Login" ResourceType="@ThemeSettingsType" HelpText="Specify if a Login option should be displayed. Note that this option does not prevent the login page from being accessible via a direct url.">Show Login?</Label>
        <div class="col-sm-9">
            <select id="login" class="form-select" @bind="@_editor[MyThemeSettings.KeyLogin].Value">
                <option value="">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                <option value="true">@SharedLocalizer["Yes"]</option>
                <option value="false">@SharedLocalizer["No"]</option>
            </select>
            @if (_editor.ShowFallback(MyThemeSettings.KeyLogin))
            {
                <div class="small text-muted">Site Default (if not set): @_editor.Fallback.Get(MyThemeSettings.KeyLogin)</div>
            }
        </div>
    </div>

    @* Enable Register *@
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="register" ResourceKey="Register" ResourceType="@ThemeSettingsType" HelpText="Specify if a Register option should be displayed. Note that this option is also dependent on the Allow Registration option in Site Settings.">Show Register?</Label>
        <div class="col-sm-9">
            <select id="register" class="form-select" @bind="@_editor[MyThemeSettings.KeyRegister].Value">
                <option value="">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                <option value="true">@SharedLocalizer["Yes"]</option>
                <option value="false">@SharedLocalizer["No"]</option>
            </select>
            @if (_editor.ShowFallback(MyThemeSettings.KeyRegister))
            {
                <div class="small text-muted">Site Default (if not set): @_editor.Fallback.Get(MyThemeSettings.KeyRegister)</div>
            }
        </div>
    </div>
    
    @* Footer HTML *@
    <div class="accordion mb-3" id="footerHtmlAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFooterHtml">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFooterHtml" aria-expanded="false" aria-controls="collapseFooterHtml">
                    @SharedLocalizer["Footer HTML"]
                </button>
            </h2>
            <div id="collapseFooterHtml" class="accordion-collapse collapse" aria-labelledby="headingFooterHtml" data-bs-parent="#footerHtmlAccordion">
                <div class="accordion-body">
                    <div class="row mb-1 align-items-center">
                        <div class="col-sm-3">
                            <Label For="footerHtml" ResourceKey="FooterHtml" ResourceType="@ThemeSettingsType" HelpText="Here you can insert your own HTML code for the footer">Footer HTML:</Label>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="() => _editor[MyThemeSettings.KeyFooterHtml].Value = DefaultFooterHtml">
                                @SharedLocalizer["Show Default"]
                            </button>
                        </div>
                        <div class="col-sm-9">
                            <textarea id="footerHtml" class="form-control" @bind="@_editor[MyThemeSettings.KeyFooterHtml].Value" rows="4"></textarea>
                            @if (_editor.ShowFallback(MyThemeSettings.KeyFooterHtml))
                            {
                                <div class="small text-muted">
                                    Site Default (if not set): <br />
                                    <pre>@_editor.Fallback.Get(MyThemeSettings.KeyFooterHtml)</pre>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Theme CSS *@
    <div class="accordion mb-3" id="themeColorAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThemeColor">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThemeColor" aria-expanded="false" aria-controls="collapseThemeColor">
                    @SharedLocalizer["Theme Css"]
                </button>
            </h2>
            <div id="collapseThemeColor" class="accordion-collapse collapse" aria-labelledby="headingThemeColor" data-bs-parent="#themeColorAccordion">
                <div class="accordion-body">
                    <div class="row mb-1 align-items-center">
                        <Label class="col-sm-3" For="themeCss" ResourceKey="ThemeCss" ResourceType="@ThemeSettingsType" HelpText="Here you can insert your own Theme CSS.">Theme Color:</Label>
                        <div class="col-sm-9">
                            <textarea id="themeCss" class="form-control" @bind="_editor[MyThemeSettings.KeyThemeCss].Value" rows="2"></textarea>
                            @if (_editor.ShowFallback(MyThemeSettings.KeyThemeCss))
                            {
                                <div class="small text-muted">
                                    Site Default (if not set): <br />
                                    <pre>@_editor.Fallback.Get(MyThemeSettings.KeyThemeCss)</pre>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

