@namespace [Owner].Cre8magic.Theme.[Theme]
@using [Owner].Cre8magic.Theme.[Theme].Client.Themes
@inherits ModuleBase
@implements Oqtane.Interfaces.ISettingsControl
@inject ISettingService SettingService
@inject IStringLocalizer<ThemeSettings> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer
@attribute [OqtaneIgnore]

    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="scope" ResourceKey="Scope" ResourceType="@resourceType" HelpText="Specify if the settings are applicable to this page or the entire site.">Setting Scope:</Label>
            <div class="col-sm-9">
                <select id="scope" class="form-select" value="@_scope" @onchange="(e => ScopeChanged(e))">
                    @if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin))
                {
                    <option value="site">@Localizer["Site"]</option>
                }
                <option value="page">@Localizer["Page"]</option>
            </select>
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="login" ResourceKey="Login" ResourceType="@resourceType" HelpText="Specify if a Login option should be displayed. Note that this option does not prevent the login page from being accessible via a direct url.">Show Login?</Label>
        <div class="col-sm-9">
            <select id="login" class="form-select" @bind="@_login">
                <option value="-">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                <option value="true">@SharedLocalizer["Yes"]</option>
                <option value="false">@SharedLocalizer["No"]</option>
            </select>
            @if (_scope != "site") {
                <div class="small text-muted">Site: @_loginMerge</div>
            }
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="register" ResourceKey="Register" ResourceType="@resourceType" HelpText="Specify if a Register option should be displayed. Note that this option is also dependent on the Allow Registration option in Site Settings.">Show Register?</Label>
        <div class="col-sm-9">
            <select id="register" class="form-select" @bind="@_register">
                <option value="-">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                <option value="true">@SharedLocalizer["Yes"]</option>
                <option value="false">@SharedLocalizer["No"]</option>
            </select>
            @if (_scope != "site") {
                <div class="small text-muted">Site: @_registerMerge</div>
            }
        </div>
    </div>

    <div class="accordion mb-3" id="footerHtmlAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFooterHtml">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFooterHtml" aria-expanded="false" aria-controls="collapseFooterHtml">
                    @SharedLocalizer["Footer HTML"]
                </button>
            </h2>
            <div id="collapseFooterHtml" class="accordion-collapse collapse" aria-labelledby="headingFooterHtml" data-bs-parent="#footerHtmlAccordion">
                <div class="accordion-body">
                    <div class="row mb-1 align-items-center">
                        <div class="col-sm-3">
                            <Label  For="footerHtml" ResourceKey="FooterHtml" ResourceType="@resourceType" HelpText="Here you can insert your own HTML code for the footer">Footer HTML:</Label>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="ShowDefaultFooterHtml">
                                @SharedLocalizer["Show Default"]
                            </button>
                        </div>
                        <div class="col-sm-9">
                            <textarea id="footerHtml" class="form-control" @bind="_footerHtml" rows="4"></textarea>
                            @if (_scope != "site")
                            {
                                <div class="small text-muted">
                                    Site:
                                    <pre>@_footerHtmlMerge</pre>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="accordion mb-3" id="themeColorAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThemeColor">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThemeColor" aria-expanded="false" aria-controls="collapseThemeColor">
                    @SharedLocalizer["Theme Css"]
                </button>
            </h2>
            <div id="collapseThemeColor" class="accordion-collapse collapse" aria-labelledby="headingThemeColor" data-bs-parent="#themeColorAccordion">
                <div class="accordion-body">
                    <div class="row mb-1 align-items-center">
                        <Label class="col-sm-3" For="themeCss" ResourceKey="ThemeCss" ResourceType="@resourceType" HelpText="Here you can insert your own Theme CSS.">Theme Color:</Label>
                        <div class="col-sm-9">
                            <textarea id="themeCss" class="form-control" @bind="_themeCss" rows="2"></textarea>
                            @if (_scope != "site")
                            {
                                <div class="small text-muted">
                                    Site:
                                    <pre>@_themeCssMerge</pre>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private int pageId = -1;
    private string resourceType = "[Owner].Cre8magic.Theme.[Theme].ThemeSettings, [Owner].Cre8magic.Theme.[Theme].Client.Oqtane"; // for localization
    private string _scope = "page";
    private string _login = "-";
    private string _register = "-";
    private string _footerHtml = "";
    private string _themeCss = "";

    private string _loginMerge = "";
    private string _registerMerge = "";
    private string _footerHtmlMerge = "";
    private string _themeCssMerge = "";


    void ShowDefaultFooterHtml()
    {
        _footerHtml = ThemeConstants.DefaultFooterHtml;
    }


    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("id"))
        {
            pageId = int.Parse(PageState.QueryString["id"]);
        }

        try
        {
            await LoadSettings();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Settings {Error}", ex.Message);
            AddModuleMessage("Error Loading Settings", MessageType.Error);
        }
    }

    private async Task LoadSettings()
    {

        var settings = (_scope == "site")
            ? await SettingService.GetSiteSettingsAsync(PageState.Site.SiteId)
            : await SettingService.GetPageSettingsAsync(pageId);

        _login = SettingService.GetSetting(settings, GetType().Namespace + ":Login", "-");
        _register = SettingService.GetSetting(settings, GetType().Namespace + ":Register", "-");
        _footerHtml = SettingService.GetSetting(settings, GetType().Namespace + ":FooterHtml", "");
        _themeCss = SettingService.GetSetting(settings, GetType().Namespace + ":ThemeCss", "");

        if (_scope == "page")
        {
            var mergedSettings = SettingService.MergeSettings(PageState.Site.Settings, settings);
            _loginMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":Login", "-");
            _registerMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":Register", "-");
            _footerHtmlMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":FooterHtml", "");
            _themeCssMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":ThemeCss", "");

        }
        await Task.Yield();
    }

    private async Task ScopeChanged(ChangeEventArgs eventArgs)
    {
        try
        {
            _scope = (string)eventArgs.Value;
            await LoadSettings();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Settings {Error}", ex.Message);
            AddModuleMessage("Error Loading Settings", MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            var settings = (_scope == "site")
                ? await SettingService.GetSiteSettingsAsync(PageState.Site.SiteId)
                : await SettingService.GetPageSettingsAsync(pageId);

            var id = (_scope == "site") ? PageState.Site.SiteId : pageId;
            var entityType = (_scope == "site") ? "Site" : "Page";

            if (_login != "-")
            {
                settings = SettingService.SetSetting(settings, GetType().Namespace + ":Login", _login);
            }
            else
            {
                await SettingService.DeleteSettingAsync(_scope, pageId, GetType().Namespace + ":Login");
            }

            if (_register != "-")
            {
                settings = SettingService.SetSetting(settings, GetType().Namespace + ":Register", _register);
            }
            else
            {
                await SettingService.DeleteSettingAsync(_scope, pageId, GetType().Namespace + ":Register");
            }

            if (!string.IsNullOrEmpty(_footerHtml))
            {
                settings = SettingService.SetSetting(settings, GetType().Namespace + ":FooterHtml", _footerHtml);
            }
            else
            {
                await SettingService.DeleteSettingAsync(entityType, id, GetType().Namespace + ":FooterHtml");
                settings.Remove(GetType().Namespace + ":FooterHtml");
            }

            if (!string.IsNullOrEmpty(_themeCss))
            {
                settings = SettingService.SetSetting(settings, GetType().Namespace + ":ThemeCss", _themeCss);
            }
            else
            {
                await SettingService.DeleteSettingAsync(entityType, id, GetType().Namespace + ":ThemeCss");
                settings.Remove(GetType().Namespace + ":ThemeCss");
            }

            if (_scope == "site")
            {
                await SettingService.UpdateSiteSettingsAsync(settings, PageState.Site.SiteId);
            }
            else
            {
                await SettingService.UpdatePageSettingsAsync(settings, pageId);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Settings {Error}", ex.Message);
            AddModuleMessage("Error Saving Settings", MessageType.Error);
        }
    }
}
